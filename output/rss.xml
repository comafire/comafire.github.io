<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Comafire's Lab</title><link>https://comafire.github.io/</link><description>Comafire's Lab</description><atom:link href="https://comafire.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:comafire@gmail.com"&gt;comafire&lt;/a&gt; </copyright><lastBuildDate>Thu, 05 Mar 2020 04:47:59 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>도커 이미지 빌드시 pip 137 에러</title><link>https://comafire.github.io/posts/2020-docker-build-error-pip/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="도커-이미지-빌드시-pip-137-에러"&gt;도커 이미지 빌드시 pip 137 에러&lt;a class="anchor-link" href="https://comafire.github.io/posts/2020-docker-build-error-pip/#%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B9%8C%EB%93%9C%EC%8B%9C-pip-137-%EC%97%90%EB%9F%AC"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;macOS 에서 Docker 이미지 빌드시 pip 로 용량이 큰 python 패키지 인스톨을 하면 아래와 같이 137 에러를 내며 죽는 경우가 있는데, 이는 Docker 빌드를 위해 필요한 메모리가 부족해서 나타나는 현상입니다.
이럴때는 Docker VM 의 메모리 사이즈를 늘려주시면 됩니다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Collecting &lt;span class="nv"&gt;tensorflow&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.0
  Downloading tensorflow-2.1.0-cp36-cp36m-manylinux2010_x86_64.whl &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;421&lt;/span&gt;.8 MB&lt;span class="o"&gt;)&lt;/span&gt;
/bin/sh: line &lt;span class="m"&gt;1&lt;/span&gt;:     &lt;span class="m"&gt;7&lt;/span&gt; 죽었음               pip3 install --cache-dir /tmp/pip3 --timeout &lt;span class="m"&gt;600&lt;/span&gt; &lt;span class="nv"&gt;tensorflow&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="nv"&gt;$TENSORFLOW_VER&lt;/span&gt;
The &lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="s1"&gt;'/bin/sh -c pip3 install --cache-dir /tmp/pip3 --timeout 600 tensorflow==$TENSORFLOW_VER ; fi'&lt;/span&gt; returned a non-zero code: &lt;span class="m"&gt;137&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2020-docker-build-error-pip/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2020-docker-build-error-pip/</guid><pubDate>Fri, 28 Feb 2020 15:00:00 GMT</pubDate></item><item><title>안전하게 디폴트 python 버전 설정하기</title><link>https://comafire.github.io/posts/2019-python-alternatives/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="안전하게-디폴트-python-버전-설정하기"&gt;안전하게 디폴트 python 버전 설정하기&lt;a class="anchor-link" href="https://comafire.github.io/posts/2019-python-alternatives/#%EC%95%88%EC%A0%84%ED%95%98%EA%B2%8C-%EB%94%94%ED%8F%B4%ED%8A%B8-python-%EB%B2%84%EC%A0%84-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;python2 의 지원 종료가 다가오면서 python3 만 설치하여 사용하는 경우가 많은데, ubuntu 에서 디폴트 python 으로 python3 사용하려면 update-alternatives 명령을 이용합니다.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-python-alternatives/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-python-alternatives/</guid><pubDate>Fri, 31 Jan 2020 15:00:00 GMT</pubDate></item><item><title>원격서버에서 VSCode 사용하기</title><link>https://comafire.github.io/posts/2019-sshcode/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="sshcode"&gt;sshcode&lt;a class="anchor-link" href="https://comafire.github.io/posts/2019-sshcode/#sshcode"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Visual Studio Code 는 MS 에서 오픈소스화한 후, 다양한 운영체제를 지원과 풍부한 extension 때문에 점점 사용 빈도수가 높아지고 있는 앱 중 하나가 되어 가고 있는것 같습니다. 노트북에서도 소스 에디터로 많이 사용하고 있지만, sshcode 로 인해 활용성이 서버로까지 확장되고 있습니다.&lt;/p&gt;
&lt;p&gt;요즘은 클라우드상에서 명령어를 통해서 작업하는 것보다는 YAML형태의 파일로 상태를 선언해서 사용하는 작업이 많아 서버에서 작업을 해야 할때 소스 에디터가 아쉬운 경우가 많습니다. vi 라는 전통적 툴이 있지만 아주 장황한 YAML 파일을 수정하다 보면 금새 타이핑이 피곤해지기 일 수 입니다.&lt;/p&gt;
&lt;p&gt;이럴 때, sshcode 라는 툴을 이용하면 서버에서 VSCode를 사용할 수 있게 되어, YAML 파일 작성과 터미널 작업을 한결 수월하게 진행할 수 있게 됩니다.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-sshcode/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-sshcode/</guid><pubDate>Fri, 15 Nov 2019 15:00:00 GMT</pubDate></item><item><title>도커 이미지를 파일로 쓰고 읽기</title><link>https://comafire.github.io/posts/2019-docker-image-save-load/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;빌드한 도커 이미지를 Registry 없이 다른 노드에서 도커 이미지로 등록해서 사용해야 할 경우 도커 이미지를 파일로 쓰고 읽는 방법입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-docker-image-save-load/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-docker-image-save-load/</guid><pubDate>Sat, 31 Aug 2019 15:00:00 GMT</pubDate></item><item><title>iconv로 파일 인코딩 변환</title><link>https://comafire.github.io/posts/2019-iconv/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;현재는 UTF-8 이 표준이 되었지만, 가끔 오래된 서버들은 아직 EUC-KR을 기본 인코딩으로 사용하는 경우가 많이 있습니다.&lt;/p&gt;
&lt;p&gt;이 경우 EUC-KR 또는 CP949 등의 예전 한글 인코딩 방식을 가지고 있는 서버에서 생성된 파일을 UTF-8 인코딩 기반 시스템에서 볼 경우 파일내 한글이 깨져 보이게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-iconv/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-iconv/</guid><pubDate>Fri, 16 Aug 2019 15:00:00 GMT</pubDate></item><item><title>Jupyter Notebook을 Shell 에서 수행하기</title><link>https://comafire.github.io/posts/2019-jupyter-nbconvert-execute/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Jupyter-에서-Notebook-을-Shell-상에서-수행하기"&gt;Jupyter 에서 Notebook 을 Shell 상에서 수행하기&lt;a class="anchor-link" href="https://comafire.github.io/posts/2019-jupyter-nbconvert-execute/#Jupyter-%EC%97%90%EC%84%9C-Notebook-%EC%9D%84-Shell-%EC%83%81%EC%97%90%EC%84%9C-%EC%88%98%ED%96%89%ED%95%98%EA%B8%B0"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Jupyter를 서버에 설치해 놓고 사용하다보면 트레이닝 중 일때 갑자기 자리를 옮겨야 할 때가 생기면 중간에 멈추고 다시 트레이닝 해야 할때가 종종 있습니다. 이럴때는 Jupyter의 Terminal 상에서 바로 nbconvert를 통해서 Notebook을 끊김 없이 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-jupyter-nbconvert-execute/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-jupyter-nbconvert-execute/</guid><pubDate>Fri, 15 Mar 2019 15:00:00 GMT</pubDate></item><item><title>Jupyter 노트북 셀을 API를 통해 반복적으로 지우기</title><link>https://comafire.github.io/posts/2019-jupyter-cell-clear-outputs/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="clear_output-함수"&gt;clear_output 함수&lt;a class="anchor-link" href="https://comafire.github.io/posts/2019-jupyter-cell-clear-outputs/#clear_output-%ED%95%A8%EC%88%98"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Jupyter에서 프로그래밍을 할 때, 루프문을 통해서 지속 적으로 로그를 출력해야 할때가 있습니다. 루프 횟수가 작다면 그런대로 봐줄만 하지만, 조금만 횟수가 늘어나더라도 스크롤의 압박을 피할수는 없게 됩니다. 이럴때는 위해 노트북에서는 셀 출력창을 지워주는 함수가 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-jupyter-cell-clear-outputs/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-jupyter-cell-clear-outputs/</guid><pubDate>Fri, 08 Mar 2019 15:00:00 GMT</pubDate></item><item><title>데이터셋 관리자 Quilt</title><link>https://comafire.github.io/posts/2019-quilt-dataset-manager/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Quilt-Dataset-Manager"&gt;Quilt Dataset Manager&lt;a class="anchor-link" href="https://comafire.github.io/posts/2019-quilt-dataset-manager/#Quilt-Dataset-Manager"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Quilt는 데이터 사이언스 프로젝트 수행시 Python Code를 이용하여 편리하게 데이터 셋을 체계적으로 관리하고 공유할 수 있도록 만들어진 도구 입니다. 게다가 데이터 셋을 공개 패키지로 만들면 무료로 사용가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://quiltdata.com/"&gt;https://quiltdata.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;홈페이지 상에는 빠르고, 재사용 가능하다는 등 다양한 장점이 있다고 설명하지만, 제일 큰 장점은 누군가 데이터 셋을 공개 패키지화해서 Quilt에 올려 놓았다면, 일일이 웹을 통해 찾아서 다운로드하는 복잡한 코드를 작성할 필요없이 간편하게 사용이 가능하다는 점입니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2019-quilt-dataset-manager/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2019-quilt-dataset-manager/</guid><pubDate>Fri, 15 Feb 2019 15:00:00 GMT</pubDate></item><item><title>Let's Encrypt SSL 인증서 Azure 에 적용하기</title><link>https://comafire.github.io/posts/2018-convert-letsencrypt-pem-to-pfx/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;웹 서버 브라우저와의 안전한 통신을 위해 HTTPS를 사용하기 위해서는 SSL 인증서가 필요합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://letsencrypt.org"&gt;https://letsencrypt.org&lt;/a&gt; 을 이용하면, 개인용이나, 개발용으로 싱글 DNS에 대해서 SSL 인증서를 발급받는 것을 무료로 진행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;Let's encrypt에서 제공하는 퉁을 이용해 SSL 인증서를 발급 받아보고, pem 확장자의 인증 파일을 SSL 오프로드를 위해 사용한 azure application gateway에서 사용할 pfx 확장자 인증 파일로 변환해 봅니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2018-convert-letsencrypt-pem-to-pfx/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2018-convert-letsencrypt-pem-to-pfx/</guid><pubDate>Sat, 21 Jul 2018 15:00:00 GMT</pubDate></item><item><title>SKP에서 Mnist 데이터 분석해보기</title><link>https://comafire.github.io/posts/2018-skp-mnist/</link><dc:creator>comafire</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="README"&gt;README&lt;a class="anchor-link" href="https://comafire.github.io/posts/2018-skp-mnist/#README"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MNIST 데이터 셋을 우편 번호 손글씨 인식이라는 가상 프로젝트의 데이터 셋으로 가정하여 SKP 상에서 간단한 Data Science 프로젝트를 진행해 봅니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;notebooks-skp/mnist: &lt;a href="https://github.com/comafire/notebooks-skp/tree/master/mnist"&gt;https://github.com/comafire/notebooks-skp/tree/master/mnist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 프로젝트를 통해서 볼 수 있는 내용은 아래와 같습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Airflow를 통한 Data Pipeline 수행 스켸쥴링&lt;/li&gt;
&lt;li&gt;Jupyter를 통한 Data Pipeline Task 개발&lt;/li&gt;
&lt;li&gt;Keras(Tensorflow backend)를 이용한 Deep Neural Network, Convolution Neural Network 모델링&lt;/li&gt;
&lt;li&gt;Scikit Learn을 이용한 ETL(Extract Load Transform), EDA(Exploratory Data Analysis), Baseline 모델링&lt;/li&gt;
&lt;li&gt;Flask를 이용한 Backend REST API 개발&lt;/li&gt;
&lt;li&gt;Nginx, VueJS, HTML, CSS를 이용한 Front Web UI 개발&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이제 Data Science Methodology 에 의해 프로젝트를 진행해봅니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://comafire.github.io/posts/2018-skp-mnist/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://comafire.github.io/posts/2018-skp-mnist/</guid><pubDate>Sat, 21 Jul 2018 15:00:00 GMT</pubDate></item></channel></rss>